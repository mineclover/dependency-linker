/**
 * Enhanced Export Extractor - File-Level Usage Examples
 *
 * This file demonstrates practical usage patterns for EnhancedExportExtractor
 * with real-world TypeScript code examples and analysis scenarios.
 */

import { EnhancedExportExtractor } from "../src/extractors/EnhancedExportExtractor";
import { TypeScriptParser } from "../src/parsers/TypeScriptParser";
import type {
	EnhancedExportExtractionResult,
	ExportMethodInfo,
	ClassExportInfo,
} from "../src/extractors/EnhancedExportExtractor";

// ===== EXAMPLE 1: Basic Usage Pattern =====
async function basicUsageExample() {
	console.log("üî∏ Example 1: Basic Usage Pattern");
	console.log("=====================================\n");

	const parser = new TypeScriptParser();
	const extractor = new EnhancedExportExtractor();

	const simpleCode = `
export function greet(name: string): string {
  return \`Hello, \${name}!\`;
}

export class Counter {
  private count: number = 0;

  public increment(): void {
    this.count++;
  }

  public getCount(): number {
    return this.count;
  }
}

export const VERSION = '1.0.0';
export let isDebug = false;
`;

	try {
		const parseResult = await parser.parse("/example.ts", simpleCode);

		if (!parseResult.ast || parseResult.errors.length > 0) {
			console.error("‚ùå ÌååÏã± Ïã§Ìå®:", parseResult.errors);
			return;
		}

		const result = extractor.extractExports(parseResult.ast, "/example.ts");

		console.log("üìä ÌÜµÍ≥Ñ:");
		console.log(`  Ï†ÑÏ≤¥ exports: ${result.statistics.totalExports}`);
		console.log(`  Ìï®Ïàò: ${result.statistics.functionExports}`);
		console.log(`  ÌÅ¥ÎûòÏä§: ${result.statistics.classExports}`);
		console.log(`  ÌÅ¥ÎûòÏä§ Î©îÏÑúÎìú: ${result.statistics.classMethodsExports}`);
		console.log(`  Î≥ÄÏàò: ${result.statistics.variableExports}\n`);

		console.log("üìã Export Î™©Î°ù:");
		result.exportMethods.forEach((exp, index) => {
			console.log(`  ${index + 1}. ${exp.name} (${exp.exportType})`);
			if (exp.parentClass) {
				console.log(`     ‚îî‚îÄ ÏÜåÏÜç ÌÅ¥ÎûòÏä§: ${exp.parentClass}`);
			}
		});
	} catch (error) {
		console.error("‚ùå Ïò§Î•ò:", error);
	}

	console.log("\n");
}

// ===== EXAMPLE 2: Advanced Class Analysis =====
async function advancedClassAnalysisExample() {
	console.log("üî∏ Example 2: Advanced Class Analysis");
	console.log("======================================\n");

	const parser = new TypeScriptParser();
	const extractor = new EnhancedExportExtractor();

	const complexClassCode = `
export abstract class BaseRepository<T> {
  protected static connection: Database;
  private cache = new Map<string, T>();

  constructor(protected tableName: string) {}

  public abstract findById(id: string): Promise<T | null>;

  public static setConnection(db: Database): void {
    BaseRepository.connection = db;
  }

  protected async cacheGet(key: string): Promise<T | null> {
    return this.cache.get(key) || null;
  }

  private logAccess(operation: string): void {
    console.log(\`Access: \${operation} on \${this.tableName}\`);
  }
}

export class UserRepository extends BaseRepository<User> {
  constructor() {
    super('users');
  }

  public async findById(id: string): Promise<User | null> {
    this.logAccess('findById');
    return this.cacheGet(id);
  }

  public async findByEmail(email: string): Promise<User | null> {
    return UserRepository.connection.query('SELECT * FROM users WHERE email = ?', [email]);
  }

  public static async createTable(): Promise<void> {
    await this.connection.execute('CREATE TABLE users...');
  }
}

export interface User {
  id: string;
  email: string;
  name: string;
}

export type UserFilter = Partial<Pick<User, 'email' | 'name'>>;
`;

	try {
		const parseResult = await parser.parse(
			"/repositories.ts",
			complexClassCode,
		);

		if (!parseResult.ast || parseResult.errors.length > 0) {
			console.error("‚ùå ÌååÏã± Ïã§Ìå®:", parseResult.errors);
			return;
		}

		const result = extractor.extractExports(
			parseResult.ast,
			"/repositories.ts",
		);

		console.log("üèóÔ∏è ÌÅ¥ÎûòÏä§ ÏÉÅÏÑ∏ Î∂ÑÏÑù:");
		result.classes.forEach((cls) => {
			console.log(`\nüìÅ ÌÅ¥ÎûòÏä§: ${cls.className}`);
			console.log(`   ÏúÑÏπò: Line ${cls.location.line}`);

			if (cls.superClass) {
				console.log(`   ÏÉÅÏÜç: ${cls.superClass}`);
			}

			if (cls.methods.length > 0) {
				console.log("   Î©îÏÑúÎìú:");
				cls.methods.forEach((method) => {
					const modifiers = [];
					if (method.isStatic) modifiers.push("static");
					if (method.isAsync) modifiers.push("async");

					const signature = method.parameters
						.map((p) => `${p.name}${p.optional ? "?" : ""}: ${p.type || "any"}`)
						.join(", ");

					console.log(
						`     - ${modifiers.join(" ")} ${method.visibility} ${method.name}(${signature})`,
					);
				});
			}

			if (cls.properties.length > 0) {
				console.log("   ÌîÑÎ°úÌçºÌã∞:");
				cls.properties.forEach((prop) => {
					const modifiers = prop.isStatic ? "static" : "";
					console.log(
						`     - ${modifiers} ${prop.visibility} ${prop.name}${prop.type ? `: ${prop.type}` : ""}`,
					);
				});
			}
		});

		// Export Ïú†ÌòïÎ≥Ñ Î∂ÑÎ•ò
		console.log("\nüìä Export Ïú†ÌòïÎ≥Ñ Î∂ÑÏÑù:");
		const byType = result.exportMethods.reduce(
			(acc, exp) => {
				if (!acc[exp.exportType]) acc[exp.exportType] = [];
				acc[exp.exportType].push(exp);
				return acc;
			},
			{} as Record<string, ExportMethodInfo[]>,
		);

		Object.entries(byType).forEach(([type, exports]) => {
			console.log(`  ${type}: ${exports.length}Í∞ú`);
			exports.forEach((exp) => console.log(`    - ${exp.name}`));
		});
	} catch (error) {
		console.error("‚ùå Ïò§Î•ò:", error);
	}

	console.log("\n");
}

// ===== EXAMPLE 3: Multi-File Analysis =====
async function multiFileAnalysisExample() {
	console.log("üî∏ Example 3: Multi-File Analysis");
	console.log("==================================\n");

	const parser = new TypeScriptParser();
	const extractor = new EnhancedExportExtractor();

	const files = [
		{
			path: "/utils.ts",
			content: `
export function formatDate(date: Date): string {
  return date.toISOString().split('T')[0];
}

export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  // implementation
  return () => {};
}

export const CONSTANTS = {
  API_URL: 'https://api.example.com',
  TIMEOUT: 5000
} as const;
`,
		},
		{
			path: "/services.ts",
			content: `
export class ApiService {
  private baseURL: string;

  constructor(baseURL: string = CONSTANTS.API_URL) {
    this.baseURL = baseURL;
  }

  public async get<T>(endpoint: string): Promise<T> {
    // implementation
    return {} as T;
  }

  public async post<T, U = any>(endpoint: string, data: U): Promise<T> {
    // implementation
    return {} as T;
  }
}

export default class DefaultLogger {
  public log(message: string): void {
    console.log(\`[\${formatDate(new Date())}] \${message}\`);
  }
}
`,
		},
		{
			path: "/types.ts",
			content: `
export interface ApiResponse<T> {
  data: T;
  status: number;
  message: string;
}

export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';

export enum ResponseStatus {
  SUCCESS = 'success',
  ERROR = 'error',
  LOADING = 'loading'
}

export default interface Config {
  apiUrl: string;
  debug: boolean;
}
`,
		},
	];

	const results: Array<{
		file: string;
		result: EnhancedExportExtractionResult | null;
	}> = [];

	// Í∞Å ÌååÏùº Î∂ÑÏÑù
	for (const file of files) {
		try {
			const parseResult = await parser.parse(file.path, file.content);

			if (!parseResult.ast || parseResult.errors.length > 0) {
				console.error(`‚ùå ${file.path} ÌååÏã± Ïã§Ìå®:`, parseResult.errors);
				results.push({ file: file.path, result: null });
				continue;
			}

			const result = extractor.extractExports(parseResult.ast, file.path);
			results.push({ file: file.path, result });
		} catch (error) {
			console.error(`‚ùå ${file.path} Î∂ÑÏÑù Ïò§Î•ò:`, error);
			results.push({ file: file.path, result: null });
		}
	}

	// Í≤∞Í≥º ÏßëÍ≥Ñ
	console.log("üìä Îã§Ï§ë ÌååÏùº Î∂ÑÏÑù Í≤∞Í≥º:");

	let totalStats = {
		files: 0,
		totalExports: 0,
		functions: 0,
		classes: 0,
		variables: 0,
		types: 0,
		defaultExports: 0,
	};

	results.forEach(({ file, result }) => {
		if (!result) {
			console.log(`  ‚ùå ${file}: Î∂ÑÏÑù Ïã§Ìå®`);
			return;
		}

		totalStats.files++;
		totalStats.totalExports += result.statistics.totalExports;
		totalStats.functions += result.statistics.functionExports;
		totalStats.classes += result.statistics.classExports;
		totalStats.variables += result.statistics.variableExports;
		totalStats.types += result.statistics.typeExports;
		totalStats.defaultExports += result.statistics.defaultExports;

		console.log(`  ‚úÖ ${file}:`);
		console.log(
			`     exports: ${result.statistics.totalExports}, functions: ${result.statistics.functionExports}, classes: ${result.statistics.classExports}`,
		);
	});

	console.log("\nüìà Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ:");
	console.log(`  Î∂ÑÏÑùÎêú ÌååÏùº: ${totalStats.files}`);
	console.log(`  Ï¥ù exports: ${totalStats.totalExports}`);
	console.log(`  Ìï®Ïàò: ${totalStats.functions}`);
	console.log(`  ÌÅ¥ÎûòÏä§: ${totalStats.classes}`);
	console.log(`  Î≥ÄÏàò: ${totalStats.variables}`);
	console.log(`  ÌÉÄÏûÖ: ${totalStats.types}`);
	console.log(`  Í∏∞Î≥∏ exports: ${totalStats.defaultExports}`);

	console.log("\n");
}

// ===== EXAMPLE 4: Error Handling and Validation =====
async function errorHandlingExample() {
	console.log("üî∏ Example 4: Error Handling and Validation");
	console.log("=============================================\n");

	const parser = new TypeScriptParser();
	const extractor = new EnhancedExportExtractor();

	// Î¨∏Î≤ï Ïò§Î•òÍ∞Ä ÏûàÎäî ÏΩîÎìú
	const brokenCode = `
export function test(
  // ÎàÑÎùΩÎêú Í¥ÑÌò∏ÏôÄ Íµ¨Î¨∏ Ïò§Î•ò
export class BrokenClass {
  method() {
    console.log("unclosed string
  }
`;

	// Îπà ÌååÏùº
	const emptyCode = "";

	// Ïò¨Î∞îÎ•∏ ÏΩîÎìú
	const validCode = `
export function validFunction(): void {
  console.log('This works!');
}
`;

	const testCases = [
		{ name: "Î¨∏Î≤ï Ïò§Î•ò", code: brokenCode },
		{ name: "Îπà ÌååÏùº", code: emptyCode },
		{ name: "Ï†ïÏÉÅ ÌååÏùº", code: validCode },
	];

	for (const testCase of testCases) {
		console.log(`üß™ ÌÖåÏä§Ìä∏: ${testCase.name}`);

		try {
			const parseResult = await parser.parse(
				`/${testCase.name}.ts`,
				testCase.code,
			);

			// ÌååÏã± Í≤∞Í≥º Í≤ÄÏÇ¨
			if (!parseResult.ast) {
				console.log("  ‚ùå AST ÏÉùÏÑ± Ïã§Ìå®");
				continue;
			}

			if (parseResult.errors.length > 0) {
				console.log("  ‚ö†Ô∏è  ÌååÏã± Ïò§Î•ò Î∞úÍ≤¨:");
				parseResult.errors.forEach((error) => {
					console.log(`    - ${error.message} (Line ${error.location.line})`);
				});
			}

			// Export Ï∂îÏ∂ú ÏãúÎèÑ
			const result = extractor.extractExports(
				parseResult.ast,
				`/${testCase.name}.ts`,
			);

			// Í≤∞Í≥º Í≤ÄÏ¶ù
			const validation = extractor.validate(result);

			if (!validation.isValid) {
				console.log("  ‚ùå Í≤ÄÏ¶ù Ïã§Ìå®:");
				validation.errors.forEach((error) => console.log(`    - ${error}`));
			} else {
				console.log(
					`  ‚úÖ ÏÑ±Í≥µ: ${result.statistics.totalExports}Í∞ú export Î∞úÍ≤¨`,
				);
			}

			if (validation.warnings.length > 0) {
				console.log("  ‚ö†Ô∏è  Í≤ÄÏ¶ù Í≤ΩÍ≥†:");
				validation.warnings.forEach((warning) =>
					console.log(`    - ${warning}`),
				);
			}
		} catch (error) {
			console.log(
				`  üí• ÏòàÏô∏ Î∞úÏÉù: ${error instanceof Error ? error.message : String(error)}`,
			);
		}

		console.log("");
	}
}

// ===== EXAMPLE 5: Performance and Configuration =====
async function performanceConfigExample() {
	console.log("üî∏ Example 5: Performance and Configuration");
	console.log("============================================\n");

	const extractor = new EnhancedExportExtractor();

	// ÌòÑÏû¨ ÏÑ§Ï†ï ÌôïÏù∏
	console.log("üîß Í∏∞Î≥∏ ÏÑ§Ï†ï:");
	const currentConfig = extractor.getConfiguration();
	console.log(
		`  Î©îÎ™®Î¶¨ Ï†úÌïú: ${(currentConfig.memoryLimit! / 1024 / 1024).toFixed(1)}MB`,
	);
	console.log(`  ÌÉÄÏûÑÏïÑÏõÉ: ${currentConfig.timeout}ms`);
	console.log(`  Ïö∞ÏÑ†ÏàúÏúÑ: ${currentConfig.priority}`);

	// ÏÑ§Ï†ï Î≥ÄÍ≤Ω
	console.log("\n‚öôÔ∏è  ÏÑ±Îä• ÏµúÏ†ÅÌôî ÏÑ§Ï†ï Ï†ÅÏö©...");
	extractor.configure({
		timeout: 10000, // 10Ï¥à
		memoryLimit: 50 * 1024 * 1024, // 50MB
		priority: 2,
		defaultOptions: {
			includeLocations: true,
			includeComments: false,
			maxDepth: 20,
			custom: {
				includeTypeAnnotations: true,
				analyzeInheritance: true,
			},
		},
	});

	// Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÌôïÏù∏
	console.log("\nüìã Ï∂îÏ∂úÍ∏∞ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞:");
	const metadata = extractor.getMetadata();
	console.log(`  Ïù¥Î¶Ñ: ${metadata.name}`);
	console.log(`  Î≤ÑÏ†Ñ: ${metadata.version}`);
	console.log(`  ÏßÄÏõê Ïñ∏Ïñ¥: ${metadata.supportedLanguages?.join(", ")}`);
	console.log(
		`  ÌèâÍ∑† Ï≤òÎ¶¨ ÏÜçÎèÑ: ${metadata.performance?.averageTimePerNode}ms/ÎÖ∏Îìú`,
	);
	console.log(`  Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ: ${metadata.performance?.memoryUsage}`);
	console.log(`  ÏãúÍ∞Ñ Î≥µÏû°ÎèÑ: ${metadata.performance?.timeComplexity}`);

	// ÎåÄÏö©Îüâ ÌååÏùº ÏãúÎÆ¨Î†àÏù¥ÏÖò
	const largeFileCode = Array(100)
		.fill(0)
		.map(
			(_, i) => `
export function func${i}(param${i}: string): string {
  return \`result\${param${i}}\`;
}

export class Class${i} {
  private prop${i}: number = ${i};

  public method${i}(): number {
    return this.prop${i};
  }
}
`,
		)
		.join("\n");

	console.log("\n‚è±Ô∏è  ÎåÄÏö©Îüâ ÌååÏùº Ï≤òÎ¶¨ ÌÖåÏä§Ìä∏...");
	const startTime = Date.now();
	const memoryBefore = process.memoryUsage();

	try {
		const parser = new TypeScriptParser();
		const parseResult = await parser.parse("/large-file.ts", largeFileCode);

		if (parseResult.ast) {
			const result = extractor.extractExports(
				parseResult.ast,
				"/large-file.ts",
			);

			const endTime = Date.now();
			const memoryAfter = process.memoryUsage();

			console.log(`  ‚úÖ Ï≤òÎ¶¨ ÏôÑÎ£å: ${endTime - startTime}ms`);
			console.log(`  üìä Í≤∞Í≥º: ${result.statistics.totalExports}Í∞ú export`);
			console.log(
				`  üíæ Î©îÎ™®Î¶¨ ÏÇ¨Ïö©: ${((memoryAfter.heapUsed - memoryBefore.heapUsed) / 1024 / 1024).toFixed(2)}MB Ï¶ùÍ∞Ä`,
			);
		}
	} catch (error) {
		console.log(
			`  ‚ùå Ï≤òÎ¶¨ Ïã§Ìå®: ${error instanceof Error ? error.message : String(error)}`,
		);
	}

	console.log("\n");
}

// ===== UTILITY FUNCTIONS =====

/**
 * Export Í≤∞Í≥ºÎ•º JSON ÌòïÌÉúÎ°ú Ï†ïÎ¶¨ÌïòÏó¨ Ï∂úÎ†•
 */
function formatResultAsJson(result: EnhancedExportExtractionResult): string {
	return JSON.stringify(
		{
			summary: result.statistics,
			exports: result.exportMethods.map((exp) => ({
				name: exp.name,
				type: exp.exportType,
				declaration: exp.declarationType,
				location: `Line ${exp.location.line}`,
				...(exp.parentClass && { parentClass: exp.parentClass }),
				...(exp.visibility && { visibility: exp.visibility }),
				...(exp.parameters && {
					parameters: exp.parameters.map(
						(p) => `${p.name}${p.optional ? "?" : ""}`,
					),
				}),
			})),
			classes: result.classes.map((cls) => ({
				name: cls.className,
				location: `Line ${cls.location.line}`,
				methodCount: cls.methods.length,
				propertyCount: cls.properties.length,
				...(cls.superClass && { extends: cls.superClass }),
			})),
		},
		null,
		2,
	);
}

/**
 * Export Ïú†ÌòïÎ≥ÑÎ°ú Í∑∏Î£πÌôî
 */
function groupExportsByType(exports: ExportMethodInfo[]) {
	return exports.reduce(
		(groups, exp) => {
			const type = exp.exportType;
			if (!groups[type]) groups[type] = [];
			groups[type].push(exp);
			return groups;
		},
		{} as Record<string, ExportMethodInfo[]>,
	);
}

// ===== MAIN EXECUTION =====
async function runAllExamples() {
	console.log("üöÄ Enhanced Export Extractor - Usage Examples");
	console.log("==============================================\n");

	await basicUsageExample();
	await advancedClassAnalysisExample();
	await multiFileAnalysisExample();
	await errorHandlingExample();
	await performanceConfigExample();

	console.log("‚úÖ Î™®Îì† ÏòàÏãú Ïã§Ìñâ ÏôÑÎ£å!");
}

// Ïä§ÌÅ¨Î¶ΩÌä∏Í∞Ä ÏßÅÏ†ë Ïã§ÌñâÎê† ÎïåÎßå ÏòàÏãú Ïã§Ìñâ
if (require.main === module) {
	runAllExamples().catch(console.error);
}

export {
	basicUsageExample,
	advancedClassAnalysisExample,
	multiFileAnalysisExample,
	errorHandlingExample,
	performanceConfigExample,
	formatResultAsJson,
	groupExportsByType,
};
