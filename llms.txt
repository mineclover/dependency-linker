# TypeScript File Analyzer - Tree-sitter Implementation

This is a standalone TypeScript file analyzer built with tree-sitter parsing. It provides fast, accurate analysis of TypeScript/TSX files for dependency extraction and code understanding.

## Project Structure

```
backup/tree-sitter/
├── src/
│   ├── models/           # Data models and type definitions
│   ├── services/         # Core analysis services
│   ├── parsers/          # Tree-sitter parsing logic
│   ├── formatters/       # Output formatting
│   ├── cli/              # Command-line interface
│   └── utils/            # Utilities and logging
├── tests/
│   ├── unit/             # Unit tests for individual components
│   ├── integration/      # Integration tests
│   ├── performance/      # Performance benchmarks
│   ├── contract/         # CLI contract tests
│   └── fixtures/         # Test fixtures
├── dist/                 # Compiled JavaScript
├── analyze-file          # CLI executable
├── package.json          # Dependencies and scripts
├── tsconfig.json         # TypeScript configuration
└── jest.config.js        # Test configuration
```

## Core Components

### Models (src/models/)
- **FileAnalysisRequest**: Input request structure with options
- **AnalysisResult**: Analysis output with success/error states
- **DependencyInfo**: Dependency classification and metadata
- **ImportInfo**: Import statement details and specifiers
- **ExportInfo**: Export statement information
- **SourceLocation**: Source code positioning data

### Services (src/services/)
- **FileAnalyzer**: Main analysis orchestrator
- **TypeScriptParser**: Tree-sitter parsing wrapper
- **DependencyAnalyzer**: Dependency classification logic

### Parsers (src/parsers/)
- **TypeScriptParserEnhanced**: Enhanced tree-sitter TypeScript parser
- **TypeScriptParserExtracted**: Extracted parser functionality
- **DependencyClassifierExtracted**: Dependency type classification

### CLI (src/cli/)
- **analyze-file.ts**: Main CLI entry point
- **CommandParser.ts**: Command-line argument parsing

## Key Features

### 1. Dependency Analysis
- **External dependencies**: npm packages, scoped packages
- **Internal dependencies**: Project-relative imports  
- **Relative dependencies**: Local file imports
- **Node.js builtins**: fs, path, http, etc.
- **Package classification**: Scoped vs regular packages

### 2. Import/Export Analysis
- **Import types**: default, named, namespace, type-only
- **Export types**: default, named, type-only
- **Source locations**: Line/column/offset positioning
- **Alias tracking**: Import/export name mappings

### 3. Performance Features
- **Tree-sitter parsing**: Fast, incremental parsing
- **Partial parsing**: Extract info from files with syntax errors
- **Configurable timeouts**: Handle large files gracefully
- **Efficient memory usage**: Stream-based processing

### 4. Output Formats
- **JSON**: Structured data for programmatic use
- **Text**: Human-readable analysis reports
- **Source locations**: Optional detailed positioning info

## Usage Patterns

### Basic Analysis
```bash
./analyze-file src/component.tsx
```

### Text Output
```bash
./analyze-file src/utils.ts --format text
```

### With Source Locations
```bash
./analyze-file src/api.ts --include-sources
```

### Large File Handling
```bash
./analyze-file large-file.ts --parse-timeout 10000
```

## Architecture Decisions

### Tree-sitter Choice
- **Fast parsing**: ~1ms per typical TypeScript file
- **Error recovery**: Partial parsing with syntax errors
- **Incremental**: Only reparse changed sections
- **Language support**: TypeScript and TSX via tree-sitter-typescript

### Dependency Classification
- **External**: Resolved npm packages from node_modules
- **Internal**: Project-scoped imports (@/ prefix)
- **Relative**: File-relative imports (./ and ../)
- **Builtin**: Node.js standard library modules

### Error Handling Strategy
- **Graceful degradation**: Return partial results when possible
- **Clear error messages**: Specific error codes and descriptions
- **Timeout handling**: Prevent hanging on problematic files
- **Validation**: Input validation with helpful error messages

## Testing Strategy

### Test Categories
- **Unit tests**: Individual component testing
- **Integration tests**: End-to-end file analysis
- **Performance tests**: Speed and memory benchmarks
- **Contract tests**: CLI interface validation

### Test Coverage
- **Models**: Data structure validation and factory methods
- **Services**: Analysis logic and error handling
- **Parsers**: Tree-sitter integration and edge cases
- **CLI**: Command parsing and output formatting

### Performance Benchmarks
- **Target**: < 1 second per file analysis
- **Memory**: < 100MB for typical workloads
- **Concurrency**: Parallel file processing support
- **Stress testing**: Large files and complex dependency graphs

## Error Types and Handling

### File Errors
- **FILE_NOT_FOUND**: Input file doesn't exist
- **PERMISSION_DENIED**: Insufficient file access rights
- **INVALID_FILE_TYPE**: Non-TypeScript file extension

### Parse Errors
- **PARSE_ERROR**: Syntax errors in TypeScript code
- **TIMEOUT**: Parsing exceeded configured time limit
- **MEMORY_ERROR**: Insufficient memory for parsing

### Analysis Errors
- **DEPENDENCY_RESOLUTION**: Failed to resolve import paths
- **CIRCULAR_DEPENDENCY**: Circular import detection
- **INVALID_SYNTAX**: Malformed import/export statements

## Configuration Options

### Analysis Options
- **format**: Output format (json|text)
- **includeSources**: Include source location data
- **parseTimeout**: Maximum parsing time in milliseconds

### Parser Configuration
- **language**: TypeScript or TSX mode
- **errorRecovery**: Enable partial parsing on syntax errors
- **includeComments**: Parse and include comment nodes

## Integration Patterns

### Build Tool Integration
```javascript
const analyzer = new FileAnalyzer();
const result = await analyzer.analyzeFile({
  filePath: 'src/component.tsx',
  options: { format: 'json', includeSources: false }
});
```

### CI/CD Pipeline Usage
```bash
# Analyze all TypeScript files
find src -name "*.ts" -o -name "*.tsx" | xargs -I {} ./analyze-file {}
```

### Dependency Auditing
```bash
# Extract external dependencies
./analyze-file src/index.ts | jq '.dependencies[] | select(.type == "external") | .source'
```

## Performance Characteristics

### Typical Performance
- **Small files** (<100 lines): < 5ms
- **Medium files** (100-500 lines): < 50ms  
- **Large files** (500+ lines): < 200ms
- **Complex files** (many imports): < 100ms

### Memory Usage
- **Parser overhead**: ~10MB baseline
- **Per-file memory**: ~1MB per 1000 lines
- **Result caching**: ~100KB per analysis result

### Scalability Limits
- **File size**: Tested up to 10,000 lines
- **Dependency count**: Handles 100+ imports efficiently
- **Concurrent analysis**: Limited by available memory

## Debugging and Diagnostics

### Debug Output
Set `NODE_ENV=debug` for verbose logging:
```bash
NODE_ENV=debug ./analyze-file src/component.tsx
```

### Error Investigation
Check parse error details:
```javascript
if (!result.success && result.error?.code === 'PARSE_ERROR') {
  console.log('Parse error details:', result.error.details);
}
```

### Performance Profiling
Use `--include-sources` to get timing information:
```bash
./analyze-file large-file.ts --include-sources | jq '.parseTime'
```

## Extension Points

### Custom Dependency Classification
Extend `DependencyClassifier` to add custom rules:
```typescript
class CustomDependencyClassifier extends DependencyClassifier {
  classifyDependency(source: string): DependencyType {
    if (source.startsWith('@mycompany/')) {
      return 'internal';
    }
    return super.classifyDependency(source);
  }
}
```

### Custom Output Formatters
Implement `OutputFormatter` interface for new formats:
```typescript
class XMLFormatter implements OutputFormatter {
  format(result: AnalysisResult): string {
    // Convert to XML format
  }
}
```

### Parser Extensions
Add support for new language features:
```typescript
class EnhancedTypeScriptParser extends TypeScriptParserEnhanced {
  extractDecorators(node: SyntaxNode): DecoratorInfo[] {
    // Extract decorator information
  }
}
```

## Migration and Maintenance

### Separation from Main Project
- **Standalone**: No dependencies on parent src/ directory
- **Self-contained**: Own package.json and dependencies
- **Isolated testing**: Independent test suite
- **Verification**: Scripts to ensure complete separation

### Dependency Management
- **Tree-sitter**: Core parsing dependency
- **TypeScript**: Type definitions and compilation
- **Jest**: Testing framework
- **Minimal external deps**: Only essential packages

### Version Compatibility
- **Node.js**: Requires Node.js 16+ for ES2020 features
- **TypeScript**: Compatible with TypeScript 4.5+
- **Tree-sitter**: Uses tree-sitter-typescript 0.20+

## Future Enhancements

### Potential Features
- **JavaScript support**: Extend to .js and .jsx files
- **Module resolution**: Advanced path resolution logic
- **Dependency graphs**: Visual dependency relationships
- **Performance optimization**: Caching and incremental parsing

### API Extensions
- **Batch processing**: Multiple file analysis
- **Watch mode**: File change monitoring
- **Plugin system**: Extensible analysis plugins
- **Language server**: LSP integration for editors

This documentation provides comprehensive coverage of the TypeScript File Analyzer implementation for LLM understanding and future development.