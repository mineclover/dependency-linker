import { DependencyAnalysisHandler } from "../handlers/dependency-analysis-handler.js";

export interface DependenciesActionOptions {
	symbol?: string;
	file?: string;
	type?: string;
	depth?: string;
	output?: string;
	includeExternal?: boolean;
	includeInternal?: boolean;
	database?: string;
}

export async function executeDependenciesAction(
	options: DependenciesActionOptions,
): Promise<void> {
	const handler = new DependencyAnalysisHandler(options.database);

	try {
		await handler.initialize();

		// Ïã¨Î≥º ÎòêÎäî ÌååÏùº Ï§ë ÌïòÎÇòÎäî Î∞òÎìúÏãú ÌïÑÏöî
		if (!options.symbol && !options.file) {
			console.log("‚ùå Please specify either --symbol or --file");
			process.exit(1);
		}

		console.log(`üîç Symbol-centric dependency analysis`);
		if (options.symbol) {
			console.log(`üéØ Target Symbol: ${options.symbol}`);
		}
		if (options.file) {
			console.log(`üìÑ Target File: ${options.file}`);
		}
		console.log(
			`üìä Type: ${options.type}, Depth: ${options.depth}, Output: ${options.output}`,
		);

		// ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏ (ÌååÏùºÏù¥ ÏßÄÏ†ïÎêú Í≤ΩÏö∞) - Ïã¨Î≥º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå ÏãúÏóêÎäî Ïä§ÌÇµ
		if (
			options.file &&
			!(options.output === "list" || options.output === "json")
		) {
			const fs = await import("node:fs");
			if (!fs.existsSync(options.file)) {
				console.log(`‚ùå File not found: ${options.file}`);
				process.exit(1);
			}
		}

		// Ïã§Ï†ú Graph DBÎ•º ÌÜµÌïú ÏùòÏ°¥ÏÑ± Î∂ÑÏÑù
		let symbolAnalysis: any;

		if (options.symbol) {
			// Ïã¨Î≥º Ï§ëÏã¨ Î∂ÑÏÑù
			symbolAnalysis = await handler.analyzeSymbolDependencies(
				options.symbol,
				options.file,
				parseInt(options.depth || "2", 10),
				options.includeExternal ?? true,
				options.includeInternal ?? true,
			);
		} else if (options.file) {
			// ÌååÏùºÏóêÏÑú Ïã¨Î≥º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
			if (options.output === "list" || options.output === "json") {
				// Ïã¨Î≥º Î¶¨Ïä§Ìä∏Îßå Ï°∞Ìöå
				let fileSymbols = await handler.getFileSymbols(options.file);

				// Ïã¨Î≥ºÏù¥ ÏóÜÏúºÎ©¥ ÌååÏùºÏùÑ Î®ºÏ†Ä Î∂ÑÏÑù
				if (fileSymbols.totalCount === 0) {
					console.log(
						"üìù No symbols found in database, analyzing file first...",
					);

					// Ïã§Ï†ú ÌååÏùº Î∂ÑÏÑù ÏàòÌñâ
					const fs = await import("node:fs");
					if (fs.existsSync(options.file)) {
						const sourceCode = fs.readFileSync(options.file, "utf-8");
						console.log(`üìù Analyzing file: ${options.file}`);
						console.log(`üìù File size: ${sourceCode.length} characters`);

						// ÌååÏùº Î∂ÑÏÑù ÏàòÌñâ
						await handler.analyzeFileSymbols(options.file);
						fileSymbols = await handler.getFileSymbols(options.file);

						console.log(
							`üìù After analysis: ${fileSymbols.totalCount} symbols found`,
						);
					}

					if (fileSymbols.totalCount === 0) {
						// ÌååÏùº Í≤ΩÎ°úÎ•º ÏÉÅÎåÄ Í≤ΩÎ°úÎ°úÎèÑ ÏãúÎèÑ
						const relativePath = options.file.replace(process.cwd() + "/", "");
						console.log(`üìù Trying relative path: ${relativePath}`);
						fileSymbols = await handler.getFileSymbols(relativePath);

						if (fileSymbols.totalCount === 0) {
							console.log("‚ùå No symbols found in the specified file");
							process.exit(1);
						}
					}
				}

				if (options.output === "json") {
					console.log(JSON.stringify(fileSymbols, null, 2));
				} else {
					console.log(`\nüìÑ File: ${fileSymbols.filePath}`);
					console.log(`üìä Total Symbols: ${fileSymbols.totalCount}`);
					console.log("\nüîç Symbols:");
					console.log(
						"Name".padEnd(20) +
							"Type".padEnd(15) +
							"Line".padEnd(8) +
							"Description",
					);
					console.log("-".repeat(60));
					fileSymbols.symbols.forEach((symbol) => {
						console.log(
							symbol.name.padEnd(20) +
								symbol.type.padEnd(15) +
								symbol.line.toString().padEnd(8) +
								symbol.description,
						);
					});
				}

				console.log("\n‚úÖ File symbols listing completed");
				return;
			} else {
				// Ï≤´ Î≤àÏß∏ Ïã¨Î≥º Î∂ÑÏÑù
				const fileAnalyses = await handler.analyzeFileSymbols(options.file);
				if (fileAnalyses.length === 0) {
					console.log("‚ùå No symbols found in the specified file");
					process.exit(1);
				}
				symbolAnalysis = fileAnalyses[0]; // Ï≤´ Î≤àÏß∏ Ïã¨Î≥º ÏÇ¨Ïö©
			}
		}

		// symbolAnalysisÍ∞Ä undefinedÏù∏ Í≤ΩÏö∞ Ï≤òÎ¶¨
		if (!symbolAnalysis) {
			console.log("‚ùå No analysis results available");
			process.exit(1);
		}

		// Ï∂úÎ†• ÌòïÏãùÏóê Îî∞Î•∏ Í≤∞Í≥º ÌëúÏãú
		if (options.output === "json") {
			console.log(JSON.stringify(symbolAnalysis, null, 2));
		} else if (options.output === "list") {
			console.log(`\nüéØ Symbol: ${symbolAnalysis.targetSymbol}`);
			console.log(`üìÑ File: ${symbolAnalysis.metadata.file}`);
			console.log(
				`üìç Location: Line ${symbolAnalysis.metadata.line}, Column ${symbolAnalysis.metadata.column}`,
			);
			console.log(`üìù Description: ${symbolAnalysis.metadata.description}`);
			console.log(`üè∑Ô∏è  Tags: ${symbolAnalysis.metadata.tags.join(", ")}`);

			console.log("\nüîó Nearest Nodes:");
			symbolAnalysis.nearestNodes.forEach((node: any, index: number) => {
				const icon =
					node.relationship === "uses"
						? "üîó"
						: node.relationship === "depends-on"
							? "‚¨áÔ∏è"
							: node.relationship === "defines"
								? "üìù"
								: "üìû";
				console.log(`  ${index + 1}. ${icon} ${node.name} (${node.type})`);
				console.log(`     üìÑ ${node.file}:${node.metadata.line}`);
				console.log(`     üìù ${node.metadata.description}`);
				console.log(`     üè∑Ô∏è  ${node.metadata.tags.join(", ")}`);
				console.log(`     üìè Distance: ${node.distance}`);
				console.log("");
			});
		} else {
			// table ÌòïÏãù (Í∏∞Î≥∏)
			console.log("\nüéØ Symbol Analysis Results:");
			console.log("=".repeat(60));

			console.log(`\nüìä Target Symbol: ${symbolAnalysis.targetSymbol}`);
			console.log(`üìÑ File: ${symbolAnalysis.metadata.file}`);
			console.log(
				`üìç Location: Line ${symbolAnalysis.metadata.line}, Column ${symbolAnalysis.metadata.column}`,
			);
			console.log(`üìù Description: ${symbolAnalysis.metadata.description}`);
			console.log(`üè∑Ô∏è  Tags: ${symbolAnalysis.metadata.tags.join(", ")}`);
			console.log(`‚ö° Complexity: ${symbolAnalysis.metadata.complexity}`);
			console.log(`üë§ Author: ${symbolAnalysis.metadata.author}`);
			console.log(`üìÖ Last Modified: ${symbolAnalysis.metadata.lastModified}`);

			console.log("\nüîó Nearest Nodes:");
			console.log(
				"Name".padEnd(20) +
					"Type".padEnd(12) +
					"Relationship".padEnd(15) +
					"Distance".padEnd(10) +
					"File",
			);
			console.log("-".repeat(80));
			symbolAnalysis.nearestNodes.forEach((node: any) => {
				console.log(
					node.name.padEnd(20) +
						node.type.padEnd(12) +
						node.relationship.padEnd(15) +
						node.distance.toString().padEnd(10) +
						node.file,
				);
			});
		}

		// Í∑∏ÎûòÌîÑ ÌÜµÍ≥Ñ Ï†ïÎ≥¥
		console.log("\nüìà Graph Statistics:");
		console.log(
			`  Total Connected Nodes: ${symbolAnalysis.graphStats.totalNodes}`,
		);
		console.log(
			`  Direct Connections: ${symbolAnalysis.graphStats.directConnections}`,
		);
		console.log(
			`  Indirect Connections: ${symbolAnalysis.graphStats.indirectConnections}`,
		);
		console.log(`  Average Distance: ${symbolAnalysis.graphStats.avgDistance}`);
		console.log(
			`  Complexity Score: ${symbolAnalysis.graphStats.complexityScore}/10`,
		);
		console.log(
			`  Centrality Score: ${symbolAnalysis.graphStats.centralityScore}`,
		);

		console.log("\n‚úÖ Symbol-centric analysis completed");
	} catch (error) {
		console.error("‚ùå Symbol analysis failed:", error);
		process.exit(1);
	} finally {
		await handler.close();
	}
}
