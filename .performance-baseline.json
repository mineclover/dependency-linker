{
  "timestamp": 1757872735911,
  "measurements": [
    {
      "name": "Full Test Suite",
      "duration": 8331.883375,
      "memoryUsage": 0,
      "success": false,
      "error": "Command failed: npm test\nFAIL tests/integration/batch-analysis.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/performance.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/dependency-compatibility.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/extensible-analyzer.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/optimization/test-categorization.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m256\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18047: \u001b[0m'tempFiles' is possibly 'null'.\n\n    \u001b[7m256\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m256\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'rootDir' does not exist on type '{ cleanup: () => Promise<void>; }'.\n\n    \u001b[7m256\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m273\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m273\u001b[0m       const critical = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m279\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m279\u001b[0m       const apiContractTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m287\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m287\u001b[0m       const e2eTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m304\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m304\u001b[0m       const optimize = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m310\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m310\u001b[0m       const parserUnitTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                           ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m317\u001b[0m:\u001b[93m43\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m317\u001b[0m       const redundantTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                          ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m324\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m324\u001b[0m       const behaviorTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m337\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m337\u001b[0m       const remove = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m343\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m343\u001b[0m       const duplicateTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m350\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m350\u001b[0m       const flakyTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m357\u001b[0m:\u001b[93m40\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m357\u001b[0m       const obsoleteTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                       ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m418\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m418\u001b[0m       categorization.critical.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m424\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m424\u001b[0m       categorization.optimize.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m428\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m428\u001b[0m       categorization.remove.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m492\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m492\u001b[0m       const categorization = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m546\u001b[0m:\u001b[93m55\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m546\u001b[0m       const flakyTests = categorization.remove.filter(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m561\u001b[0m:\u001b[93m51\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'rec' implicitly has an 'any' type.\n\n    \u001b[7m561\u001b[0m       const sharedSetupRec = recommendations.find(rec =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                  ~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m568\u001b[0m:\u001b[93m56\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'rec' implicitly has an 'any' type.\n\n    \u001b[7m568\u001b[0m       const duplicateRemovalRec = recommendations.find(rec =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                       ~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m603\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m603\u001b[0m       categorization.critical.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m610\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m610\u001b[0m       categorization.optimize.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m617\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m617\u001b[0m       categorization.remove.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m622\u001b[0m:\u001b[93m3\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2322: \u001b[0mType 'any[]' is not assignable to type 'never[]'.\n      Type 'any' is not assignable to type 'never'.\n\n    \u001b[7m622\u001b[0m   categorization.recommendations = generateRecommendations(categorization);\n    \u001b[7m   \u001b[0m \u001b[91m  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m719\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m719\u001b[0m     baseCategorization.remove.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m733\u001b[0m:\u001b[93m60\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m733\u001b[0m   const complexSetupTests = categorization.optimize.filter(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                           ~~~~\u001b[0m\n\nFAIL tests/integration/optimization/test-suite-analysis.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m131\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18047: \u001b[0m'tempFiles' is possibly 'null'.\n\n    \u001b[7m131\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m131\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'rootDir' does not exist on type '{ cleanup: () => Promise<void>; }'.\n\n    \u001b[7m131\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m143\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<string[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<string[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<string[]>' is not assignable to type 'Promise<void>'.\n          Type 'string[]' is not assignable to type 'void'.\n\n    \u001b[7m143\u001b[0m       const result = await benchmark.benchmark('test-discovery', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m148\u001b[0m       const testFiles = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m151\u001b[0m       expect(testFiles.some(f => f.includes('typescript-parser.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m152\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m152\u001b[0m       expect(testFiles.some(f => f.includes('typescript-parser-duplicate.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m153\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m153\u001b[0m       expect(testFiles.some(f => f.includes('analysis-engine.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m154\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m154\u001b[0m       expect(testFiles.some(f => f.includes('timing-dependent.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m155\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m155\u001b[0m       expect(testFiles.some(f => f.includes('heavy-setup.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m169\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m169\u001b[0m       const analysis = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m188\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m188\u001b[0m       const metrics = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m206\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m206\u001b[0m       const result = await benchmark.benchmark('duplicate-detection', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m211\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m211\u001b[0m       const duplicates = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m217\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'group' implicitly has an 'any' type.\n\n    \u001b[7m217\u001b[0m       const duplicateGroup = duplicates.find(group =>\n    \u001b[7m   \u001b[0m \u001b[91m                                             ~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m218\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m218\u001b[0m         group.tests.some(test => test.includes('typescript-parser'))\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m227\u001b[0m:\u001b[93m67\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m227\u001b[0m       const result = await benchmark.benchmark('flaky-detection', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                  ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m232\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m232\u001b[0m       const flakyTests = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m237\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m237\u001b[0m       const timingTest = flakyTests.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m247\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m247\u001b[0m       const result = await benchmark.benchmark('setup-analysis', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m252\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m252\u001b[0m       const complexSetups = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m258\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'setup' implicitly has an 'any' type.\n\n    \u001b[7m258\u001b[0m       const heavySetup = complexSetups.find(setup =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m275\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m275\u001b[0m       const impact = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m298\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m298\u001b[0m       const patterns = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m320\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m320\u001b[0m       const risks = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                           ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m338\u001b[0m:\u001b[93m75\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m338\u001b[0m       const result = await benchmark.benchmark('critical-identification', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                          ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m343\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m343\u001b[0m       const critical = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m348\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m348\u001b[0m       const integrationTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m362\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to type 'Promise<void>'.\n          Type '{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }' is not assignable to type 'void'.\n\n    \u001b[7m362\u001b[0m       const result = await benchmark.benchmark('full-analysis', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m384\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m384\u001b[0m       const analysis = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n\nPASS src/task/tests/TaskAPI.test.ts\n  TaskAPI\n    Task CRUD Operations\n      createTask\n        ✓ should create a valid task (2 ms)\n        ✓ should reject task creation with empty title (14 ms)\n        ✓ should reject task creation with invalid estimated duration\n      getTask\n        ✓ should retrieve an existing task (3 ms)\n        ✓ should throw TaskNotFoundError for non-existent task (1 ms)\n      updateTask\n        ✓ should update task fields (9 ms)\n        ✓ should validate status transitions (1 ms)\n      deleteTask\n        ✓ should delete an existing task\n        ✓ should prevent deletion of task with dependents (1 ms)\n      getTasks\n        ✓ should return all tasks when no filter is provided\n        ✓ should filter tasks by status (1 ms)\n    Task Execution\n      startTask\n        ✓ should start a task without dependencies (1210 ms)\n        ✓ should not start task with unresolved dependencies (1 ms)\n      completeTask\n        ✓ should complete a task manually (1 ms)\n      cancelTask\n        ✓ should cancel a task (1 ms)\n    Dependency Management\n      addDependency\n        ✓ should add a dependency between tasks (1 ms)\n        ✓ should prevent circular dependencies (1 ms)\n      canStartTask\n        ✓ should return true for task without dependencies\n        ✓ should return false for task with incomplete dependencies (1 ms)\n    Progress Tracking\n      getTaskProgress\n        ✓ should return current task progress (1 ms)\n      updateTaskProgress\n        ✓ should update task progress\n        ✓ should clamp progress percentage to valid range (1 ms)\n    Analytics and Statistics\n      getStatistics\n        ✓ should return task statistics (1 ms)\n      estimateCompletionTime\n        ✓ should estimate total completion time (1 ms)\n    Data Management\n      exportTasks\n        ✓ should export tasks in JSON format (1 ms)\n        ✓ should export tasks in CSV format (2 ms)\n    Specification Tasks\n      createSpecificationTasks\n        ✓ should create all 21 specification tasks (1 ms)\n      getTasksByPhase\n        ✓ should return tasks for specific phase (1 ms)\n      getReadyTasks\n        ✓ should return tasks that can be started\n\nFAIL tests/integration/plugin-system.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/unit/services/CacheManager.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nPASS tests/contract/data-interpreter.contract.test.ts\n  IDataInterpreter Contract\n    Core Interpretation\n      ✓ interpret should process input data with context (1 ms)\n      ✓ interpret should return consistent output structure\n      ✓ interpret should handle empty input data\n      ✓ interpret should utilize context information (1 ms)\n    Data Type Support\n      ✓ supports should return boolean for data type check\n      ✓ supports should handle various data types (1 ms)\n      ✓ should have specific data type specialization\n    Plugin Metadata\n      ✓ getName should return string identifier\n      ✓ getVersion should return valid version string (1 ms)\n      ✓ getName should be consistent\n    Output Schema\n      ✓ getOutputSchema should return valid schema (2 ms)\n      ✓ output should conform to declared schema\n    Input Validation\n      ✓ validate should return ValidationResult\n      ✓ validate should accept valid interpreter input\n      ✓ validate should detect invalid input (1 ms)\n      ✓ validate should provide actionable error messages\n    Context Handling\n      ✓ should handle minimal context\n      ✓ should handle rich context with options (1 ms)\n      ✓ should adapt behavior based on language context\n    Performance Requirements\n      ✓ interpret should complete quickly for small datasets\n      ✓ supports should execute instantly (1 ms)\n      ✓ validate should be efficient\n    Error Handling\n      ✓ interpret should handle null input gracefully\n      ✓ interpret should handle missing context fields\n      ✓ should handle malformed input data gracefully (1 ms)\n    Plugin System Integration\n      ✓ should provide discoverable plugin information\n      ✓ should work in plugin registry system (3 ms)\n\nPASS tests/contract/data-extractor.contract.test.ts\n  IDataExtractor Contract\n    Core Extraction\n      ✓ extract should accept AST and file path\n      ✓ extract should return consistent data structure (1 ms)\n      ✓ extract should handle empty AST\n      ✓ extract should handle complex AST structures\n    Language Support\n      ✓ supports should return boolean\n      ✓ supports should handle multiple languages\n      ✓ should have specific language support pattern (1 ms)\n    Metadata\n      ✓ getName should return string identifier\n      ✓ getVersion should return valid version string\n      ✓ getName should return consistent value (1 ms)\n    Data Validation\n      ✓ validate should return ValidationResult\n      ✓ validate should accept extracted data format (2 ms)\n      ✓ validate should detect invalid data\n      ✓ validate should provide meaningful error messages\n    Performance Requirements\n      ✓ extract should complete quickly for small ASTs\n      ✓ supports should execute instantly\n      ✓ validate should be efficient\n    Error Handling\n      ✓ extract should handle malformed AST gracefully (1 ms)\n      ✓ extract should handle missing file path\n      ✓ validate should handle null/undefined data\n    Type Safety\n      ✓ extract should return consistent type\n      ✓ validate should accept return type of extract (1 ms)\n    Plugin Compatibility\n      ✓ should work with plugin registry system\n      ✓ should provide plugin metadata\n\nPASS tests/contract/analysis-engine.contract.test.ts\n  IAnalysisEngine Contract\n    File Analysis\n      ✓ analyzeFile should accept valid file path and return analysis result (1 ms)\n      ✓ analyzeFile should accept optional configuration\n      ✓ analyzeFile should handle non-existent files gracefully (1 ms)\n    Batch Analysis\n      ✓ analyzeBatch should process multiple files\n      ✓ analyzeBatch should handle empty array\n    Plugin Registration\n      ✓ registerExtractor should accept valid extractor (1 ms)\n      ✓ registerInterpreter should accept valid interpreter\n    Cache Management\n      ✓ clearCache should be callable\n      ✓ getCacheStats should return valid statistics (1 ms)\n    Performance Requirements\n      ✓ analyzeFile should complete within reasonable time\n      ✓ performance metrics should be included in results (2 ms)\n\nPASS tests/integration/ast-caching.test.ts\n  AST Caching Integration\n    Cache Hit Performance\n      ✓ should cache AST results for faster subsequent access (8 ms)\n      ✓ should achieve target cache hit rate over multiple files (12 ms)\n    Cache Invalidation\n      ✓ should invalidate cache when file is modified (4 ms)\n      ✓ should support manual cache invalidation (1 ms)\n      ✓ should invalidate dependent caches when dependencies change (4 ms)\n    Memory Management\n      ✓ should enforce cache size limits (2 ms)\n      ✓ should evict least recently used entries when cache is full (2 ms)\n      ✓ should monitor memory usage and trigger cleanup (1 ms)\n    Cache Persistence\n      ✓ should support cache persistence across sessions (5 ms)\n      ✓ should validate cache integrity on load (2 ms)\n    Cache Configuration\n      ✓ should support configurable cache settings (1 ms)\n      ✓ should support cache warming for frequently used files (3 ms)\n    Cache Analytics\n      ✓ should provide detailed cache statistics (2 ms)\n      ✓ should track cache performance over time (2 ms)\n\nPASS tests/integration/multi-language-analysis.test.ts\n  Multi-Language Analysis Integration\n    TypeScript Analysis\n      ✓ should analyze TypeScript files with imports and exports (4 ms)\n      ✓ should handle TypeScript syntax errors gracefully (2 ms)\n    JavaScript Analysis\n      ✓ should analyze CommonJS modules (3 ms)\n      ✓ should analyze ES6 modules (2 ms)\n    Go Analysis\n      ✓ should analyze Go packages and imports (1 ms)\n    Java Analysis\n      ✓ should analyze Java classes and imports (1 ms)\n    Batch Analysis\n      ✓ should analyze multiple files of different languages (3 ms)\n    Cross-Language Dependency Analysis\n      ✓ should identify dependencies across language boundaries (2 ms)\n\nPASS tests/unit/services/InterpreterRegistry.test.ts\n  InterpreterRegistry\n    Registration\n      ✓ should register interpreter successfully\n      ✓ should throw error when registering duplicate interpreter (3 ms)\n      ✓ should unregister interpreter successfully\n      ✓ should return false when unregistering non-existent interpreter\n    Interpreter Retrieval\n      ✓ should return interpreter by name (1 ms)\n      ✓ should throw error when getting non-existent interpreter\n      ✓ should check if interpreter exists\n    Data Type Support\n      ✓ should return interpreters that support a data type (1 ms)\n      ✓ should return empty array when no interpreters support data type\n      ✓ should support language-specific data type filtering\n    Registry Operations\n      ✓ should list all registered interpreter names (1 ms)\n      ✓ should clear all interpreters\n      ✓ should get interpreter count (2 ms)\n    Interpreter Metadata\n      ✓ should retrieve interpreter metadata\n      ✓ should throw error when getting metadata for non-existent interpreter\n    Processing Chain\n      ✓ should process data through interpreter (1 ms)\n      ✓ should get compatible interpreters for data processing chain\n    Error Handling\n      ✓ should handle interpreter validation errors gracefully\n      ✓ should handle processing errors in interpreter chain (6 ms)\n    Configuration Management\n      ✓ should configure interpreter through registry\n    Capabilities\n      ✓ should retrieve interpreter capabilities\n\nPASS tests/contract/language-parser.contract.test.ts\n  ILanguageParser Contract\n    Language Support\n      ✓ supports should return boolean for language check (1 ms)\n      ✓ supports should handle common language identifiers\n      ✓ detectLanguage should return language string from file path (1 ms)\n      ✓ detectLanguage should handle content-based detection\n    Parsing Functionality\n      ✓ parse should return valid ParseResult (1 ms)\n      ✓ parse should accept file path and optional content\n      ✓ parse should handle invalid syntax gracefully\n      ✓ parse should provide performance metrics (1 ms)\n    Syntax Validation\n      ✓ validateSyntax should return validation result\n      ✓ validateSyntax should detect valid syntax\n      ✓ validateSyntax should detect invalid syntax (1 ms)\n    Grammar Access\n      ✓ getGrammar should return grammar object (1 ms)\n    Performance Requirements\n      ✓ parse should complete within target time for small files\n      ✓ parse should report accurate timing (1 ms)\n      ✓ supports should execute quickly\n    Error Handling\n      ✓ parse should handle file not found\n      ✓ parse should handle unsupported files\n    Caching Behavior\n      ✓ parse should indicate cache hits when appropriate\n\nPASS tests/unit/services/ExtractorRegistry.test.ts\n  ExtractorRegistry\n    Registration\n      ✓ should register extractor successfully\n      ✓ should handle registering duplicate extractor with warning (3 ms)\n      ✓ should unregister extractor successfully\n      ✓ should return false when unregistering non-existent extractor\n    Extractor Retrieval\n      ✓ should return extractor by name\n      ✓ should throw error when getting non-existent extractor\n      ✓ should check if extractor exists\n    Language Support\n      ✓ should return extractors that support a language (1 ms)\n      ✓ should return empty array when no extractors support language\n    Registry Operations\n      ✓ should list all registered extractor names\n      ✓ should clear all extractors (1 ms)\n      ✓ should get extractor count\n    Extractor Metadata\n      ✓ should retrieve extractor metadata\n      ✓ should return undefined when getting non-existent extractor\n    Error Handling\n      ✓ should handle extractor validation errors gracefully\n    Configuration Management\n      ✓ should configure extractor through registry\n\nPASS tests/unit/models/FileAnalysisRequest.test.ts\n  FileAnalysisRequest Model\n    AnalysisOptions interface\n      ✓ should create valid options object (1 ms)\n      ✓ should work with minimal options\n    FileAnalysisRequest interface\n      ✓ should create valid request\n      ✓ should work without options (1 ms)\n    validateFileAnalysisRequest\n      ✓ should validate valid request\n      ✓ should reject request without filePath\n      ✓ should reject empty filePath (1 ms)\n      ✓ should reject invalid format\n      ✓ should reject invalid parseTimeout\n      ✓ should accept request without options\n    normalizeAnalysisOptions\n      ✓ should provide defaults for undefined options (1 ms)\n      ✓ should provide defaults for missing properties (2 ms)\n      ✓ should preserve provided values\n    isTypeScriptFile\n      ✓ should return true for .ts files\n      ✓ should return true for .tsx files\n      ✓ should return false for non-TypeScript files (1 ms)\n      ✓ should handle edge cases\n\nPASS tests/unit/models/ImportInfo.test.ts\n  ImportInfo Model\n    ImportSpecifier interface\n      ✓ should create valid import specifier (1 ms)\n      ✓ should create default import specifier\n      ✓ should create namespace import specifier (1 ms)\n      ✓ should create named import specifier\n    ImportInfo interface\n      ✓ should create default import\n      ✓ should create named imports (1 ms)\n      ✓ should create namespace import (1 ms)\n      ✓ should create side-effect import (1 ms)\n      ✓ should create type-only imports\n      ✓ should detect import types correctly\n      ✓ should generate import statistics (1 ms)\n\nPASS tests/unit/models/ExportInfo.test.ts\n  ExportInfo Model\n    ExportInfo interface\n      ✓ should create valid export info object (1 ms)\n      ✓ should create export using helper function\n      ✓ should support all export types (1 ms)\n      ✓ should handle type-only exports\n      ✓ should detect export types correctly\n      ✓ should validate export info objects (1 ms)\n      ✓ should group exports by type (1 ms)\n      ✓ should generate export statistics (1 ms)\n      ✓ should validate export names for conflicts\n\nFAIL tests/integration/api/compatibility.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/api/compatibility.test.ts\u001b[0m:\u001b[93m283\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getMetrics' does not exist on type 'PerformanceMonitor'.\n\n    \u001b[7m283\u001b[0m       expect(typeof monitor.getMetrics).toBe('function');\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~\u001b[0m\n\nFAIL tests/contract/test-setup-manager.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-setup-manager.contract.test.ts\u001b[0m:\u001b[93m372\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m372\u001b[0m         expect(error.message).toContain('getResourceState');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n\nFAIL tests/contract/test-optimizer.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-optimizer.contract.test.ts\u001b[0m:\u001b[93m13\u001b[0m:\u001b[93m3\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"../../specs/005-test-optimization/contracts/test-optimization.contract\"' has no exported member 'RollbackResult'.\n\n    \u001b[7m13\u001b[0m   RollbackResult,\n    \u001b[7m  \u001b[0m \u001b[91m  ~~~~~~~~~~~~~~\u001b[0m\n\nFAIL tests/contract/test-data-factory.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-data-factory.contract.test.ts\u001b[0m:\u001b[93m453\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m453\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-data-factory.contract.test.ts\u001b[0m:\u001b[93m454\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m454\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n\nFAIL tests/contract/test-benchmark.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-benchmark.contract.test.ts\u001b[0m:\u001b[93m519\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m519\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-benchmark.contract.test.ts\u001b[0m:\u001b[93m520\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m520\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n\nFAIL tests/contract/test-assertions.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m480\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m480\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m481\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m481\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m509\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m509\u001b[0m         expect(error.message).toContain('3/3 failures');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m510\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m510\u001b[0m         expect(error.message).toContain('Sample errors');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m511\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m511\u001b[0m         expect(error.message).toContain('Test failure');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n\nFAIL tests/contract/test-analyzer.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m59\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'RollbackResult'.\n\n    \u001b[7m59\u001b[0m   rollbackOptimization(result: OptimizationResult): Promise<RollbackResult>;\n    \u001b[7m  \u001b[0m \u001b[91m                                                            ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m95\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m95\u001b[0m   testSuites: TestSuite[];\n    \u001b[7m  \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m96\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestIssue'.\n\n    \u001b[7m96\u001b[0m   issues: TestIssue[];\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m100\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m100\u001b[0m   critical: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m101\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m101\u001b[0m   optimize: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m102\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m102\u001b[0m   remove: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m103\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'DuplicateTest'.\n\n    \u001b[7m103\u001b[0m   duplicates: DuplicateTest[];\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m129\u001b[0m:\u001b[93m17\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m129\u001b[0m   removedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m130\u001b[0m:\u001b[93m18\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m130\u001b[0m   modifiedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                 ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m141\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'ValidationIssue'.\n\n    \u001b[7m141\u001b[0m   issuesFound: ValidationIssue[];\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~~~~~~~~~~~\u001b[0m\n\nFAIL tests/contract/performance-tracker.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m59\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'RollbackResult'.\n\n    \u001b[7m59\u001b[0m   rollbackOptimization(result: OptimizationResult): Promise<RollbackResult>;\n    \u001b[7m  \u001b[0m \u001b[91m                                                            ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m95\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m95\u001b[0m   testSuites: TestSuite[];\n    \u001b[7m  \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m96\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestIssue'.\n\n    \u001b[7m96\u001b[0m   issues: TestIssue[];\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m100\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m100\u001b[0m   critical: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m101\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m101\u001b[0m   optimize: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m102\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m102\u001b[0m   remove: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m103\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'DuplicateTest'.\n\n    \u001b[7m103\u001b[0m   duplicates: DuplicateTest[];\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m129\u001b[0m:\u001b[93m17\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m129\u001b[0m   removedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m130\u001b[0m:\u001b[93m18\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m130\u001b[0m   modifiedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                 ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m141\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'ValidationIssue'.\n\n    \u001b[7m141\u001b[0m   issuesFound: ValidationIssue[];\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~~~~~~~~~~~\u001b[0m\n\nSummary of all failing tests\nFAIL tests/integration/batch-analysis.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/performance.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/dependency-compatibility.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/extensible-analyzer.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/optimization/test-categorization.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m256\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18047: \u001b[0m'tempFiles' is possibly 'null'.\n\n    \u001b[7m256\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m256\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'rootDir' does not exist on type '{ cleanup: () => Promise<void>; }'.\n\n    \u001b[7m256\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m273\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m273\u001b[0m       const critical = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m279\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m279\u001b[0m       const apiContractTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m287\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m287\u001b[0m       const e2eTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m304\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m304\u001b[0m       const optimize = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m310\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m310\u001b[0m       const parserUnitTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                           ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m317\u001b[0m:\u001b[93m43\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m317\u001b[0m       const redundantTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                          ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m324\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m324\u001b[0m       const behaviorTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m337\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m337\u001b[0m       const remove = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m343\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m343\u001b[0m       const duplicateTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m350\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m350\u001b[0m       const flakyTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m357\u001b[0m:\u001b[93m40\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m357\u001b[0m       const obsoleteTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                       ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m418\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m418\u001b[0m       categorization.critical.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m424\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m424\u001b[0m       categorization.optimize.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m428\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m428\u001b[0m       categorization.remove.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m492\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m492\u001b[0m       const categorization = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m546\u001b[0m:\u001b[93m55\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m546\u001b[0m       const flakyTests = categorization.remove.filter(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m561\u001b[0m:\u001b[93m51\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'rec' implicitly has an 'any' type.\n\n    \u001b[7m561\u001b[0m       const sharedSetupRec = recommendations.find(rec =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                  ~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m568\u001b[0m:\u001b[93m56\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'rec' implicitly has an 'any' type.\n\n    \u001b[7m568\u001b[0m       const duplicateRemovalRec = recommendations.find(rec =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                       ~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m603\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m603\u001b[0m       categorization.critical.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m610\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m610\u001b[0m       categorization.optimize.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m617\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m617\u001b[0m       categorization.remove.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m622\u001b[0m:\u001b[93m3\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2322: \u001b[0mType 'any[]' is not assignable to type 'never[]'.\n      Type 'any' is not assignable to type 'never'.\n\n    \u001b[7m622\u001b[0m   categorization.recommendations = generateRecommendations(categorization);\n    \u001b[7m   \u001b[0m \u001b[91m  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m719\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m719\u001b[0m     baseCategorization.remove.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m733\u001b[0m:\u001b[93m60\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m733\u001b[0m   const complexSetupTests = categorization.optimize.filter(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                           ~~~~\u001b[0m\n\nFAIL tests/integration/optimization/test-suite-analysis.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m131\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18047: \u001b[0m'tempFiles' is possibly 'null'.\n\n    \u001b[7m131\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m131\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'rootDir' does not exist on type '{ cleanup: () => Promise<void>; }'.\n\n    \u001b[7m131\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m143\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<string[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<string[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<string[]>' is not assignable to type 'Promise<void>'.\n          Type 'string[]' is not assignable to type 'void'.\n\n    \u001b[7m143\u001b[0m       const result = await benchmark.benchmark('test-discovery', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m148\u001b[0m       const testFiles = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m151\u001b[0m       expect(testFiles.some(f => f.includes('typescript-parser.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m152\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m152\u001b[0m       expect(testFiles.some(f => f.includes('typescript-parser-duplicate.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m153\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m153\u001b[0m       expect(testFiles.some(f => f.includes('analysis-engine.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m154\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m154\u001b[0m       expect(testFiles.some(f => f.includes('timing-dependent.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m155\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m155\u001b[0m       expect(testFiles.some(f => f.includes('heavy-setup.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m169\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m169\u001b[0m       const analysis = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m188\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m188\u001b[0m       const metrics = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m206\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m206\u001b[0m       const result = await benchmark.benchmark('duplicate-detection', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m211\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m211\u001b[0m       const duplicates = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m217\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'group' implicitly has an 'any' type.\n\n    \u001b[7m217\u001b[0m       const duplicateGroup = duplicates.find(group =>\n    \u001b[7m   \u001b[0m \u001b[91m                                             ~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m218\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m218\u001b[0m         group.tests.some(test => test.includes('typescript-parser'))\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m227\u001b[0m:\u001b[93m67\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m227\u001b[0m       const result = await benchmark.benchmark('flaky-detection', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                  ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m232\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m232\u001b[0m       const flakyTests = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m237\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m237\u001b[0m       const timingTest = flakyTests.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m247\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m247\u001b[0m       const result = await benchmark.benchmark('setup-analysis', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m252\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m252\u001b[0m       const complexSetups = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m258\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'setup' implicitly has an 'any' type.\n\n    \u001b[7m258\u001b[0m       const heavySetup = complexSetups.find(setup =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m275\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m275\u001b[0m       const impact = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m298\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m298\u001b[0m       const patterns = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m320\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m320\u001b[0m       const risks = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                           ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m338\u001b[0m:\u001b[93m75\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m338\u001b[0m       const result = await benchmark.benchmark('critical-identification', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                          ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m343\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m343\u001b[0m       const critical = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m348\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m348\u001b[0m       const integrationTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m362\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to type 'Promise<void>'.\n          Type '{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }' is not assignable to type 'void'.\n\n    \u001b[7m362\u001b[0m       const result = await benchmark.benchmark('full-analysis', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m384\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m384\u001b[0m       const analysis = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n\nFAIL tests/integration/plugin-system.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/unit/services/CacheManager.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/api/compatibility.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/api/compatibility.test.ts\u001b[0m:\u001b[93m283\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getMetrics' does not exist on type 'PerformanceMonitor'.\n\n    \u001b[7m283\u001b[0m       expect(typeof monitor.getMetrics).toBe('function');\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~\u001b[0m\n\nFAIL tests/contract/test-setup-manager.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-setup-manager.contract.test.ts\u001b[0m:\u001b[93m372\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m372\u001b[0m         expect(error.message).toContain('getResourceState');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n\nFAIL tests/contract/test-optimizer.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-optimizer.contract.test.ts\u001b[0m:\u001b[93m13\u001b[0m:\u001b[93m3\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"../../specs/005-test-optimization/contracts/test-optimization.contract\"' has no exported member 'RollbackResult'.\n\n    \u001b[7m13\u001b[0m   RollbackResult,\n    \u001b[7m  \u001b[0m \u001b[91m  ~~~~~~~~~~~~~~\u001b[0m\n\nFAIL tests/contract/test-data-factory.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-data-factory.contract.test.ts\u001b[0m:\u001b[93m453\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m453\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-data-factory.contract.test.ts\u001b[0m:\u001b[93m454\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m454\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n\nFAIL tests/contract/test-benchmark.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-benchmark.contract.test.ts\u001b[0m:\u001b[93m519\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m519\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-benchmark.contract.test.ts\u001b[0m:\u001b[93m520\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m520\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n\nFAIL tests/contract/test-assertions.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m480\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m480\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m481\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m481\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m509\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m509\u001b[0m         expect(error.message).toContain('3/3 failures');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m510\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m510\u001b[0m         expect(error.message).toContain('Sample errors');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m511\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m511\u001b[0m         expect(error.message).toContain('Test failure');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n\nFAIL tests/contract/test-analyzer.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m59\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'RollbackResult'.\n\n    \u001b[7m59\u001b[0m   rollbackOptimization(result: OptimizationResult): Promise<RollbackResult>;\n    \u001b[7m  \u001b[0m \u001b[91m                                                            ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m95\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m95\u001b[0m   testSuites: TestSuite[];\n    \u001b[7m  \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m96\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestIssue'.\n\n    \u001b[7m96\u001b[0m   issues: TestIssue[];\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m100\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m100\u001b[0m   critical: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m101\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m101\u001b[0m   optimize: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m102\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m102\u001b[0m   remove: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m103\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'DuplicateTest'.\n\n    \u001b[7m103\u001b[0m   duplicates: DuplicateTest[];\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m129\u001b[0m:\u001b[93m17\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m129\u001b[0m   removedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m130\u001b[0m:\u001b[93m18\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m130\u001b[0m   modifiedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                 ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m141\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'ValidationIssue'.\n\n    \u001b[7m141\u001b[0m   issuesFound: ValidationIssue[];\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~~~~~~~~~~~\u001b[0m\n\nFAIL tests/contract/performance-tracker.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m59\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'RollbackResult'.\n\n    \u001b[7m59\u001b[0m   rollbackOptimization(result: OptimizationResult): Promise<RollbackResult>;\n    \u001b[7m  \u001b[0m \u001b[91m                                                            ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m95\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m95\u001b[0m   testSuites: TestSuite[];\n    \u001b[7m  \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m96\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestIssue'.\n\n    \u001b[7m96\u001b[0m   issues: TestIssue[];\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m100\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m100\u001b[0m   critical: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m101\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m101\u001b[0m   optimize: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m102\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m102\u001b[0m   remove: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m103\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'DuplicateTest'.\n\n    \u001b[7m103\u001b[0m   duplicates: DuplicateTest[];\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m129\u001b[0m:\u001b[93m17\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m129\u001b[0m   removedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m130\u001b[0m:\u001b[93m18\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m130\u001b[0m   modifiedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                 ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m141\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'ValidationIssue'.\n\n    \u001b[7m141\u001b[0m   issuesFound: ValidationIssue[];\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~~~~~~~~~~~\u001b[0m\n\n\nTest Suites: 16 failed, 12 passed, 28 total\nTests:       205 passed, 205 total\nSnapshots:   0 total\nTime:        7.123 s\nRan all test suites.\nError: Jest: Got error running globalTeardown - /Users/junwoobang/project/dependency-linker/tests/helpers/optimization/globalTeardown.ts, reason: [TSError: \u001b[96mtests/helpers/optimization/globalTeardown.ts\u001b[0m:\u001b[93m16\u001b[0m:\u001b[93m21\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2365: \u001b[0mOperator '<=' cannot be applied to types 'number' and 'Timeout'.\n\n\u001b[7m16\u001b[0m     for (let i = 0; i <= highestTimeoutId; i++) {\n\u001b[7m  \u001b[0m \u001b[91m                    ~~~~~~~~~~~~~~~~~~~~~\u001b[0m]\n    at runGlobalHook (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/runGlobalHook.js:124:15)\n    at runJest (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/runJest.js:374:5)\n    at _run10000 (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/cli/index.js:343:7)\n    at runCLI (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/cli/index.js:198:3)\n    at Object.run (/Users/junwoobang/project/dependency-linker/node_modules/jest-cli/build/run.js:130:37)\n",
      "totalTests": 0,
      "passedTests": 0,
      "failedTests": 0,
      "passRate": 0
    },
    {
      "name": "Unit Tests Only",
      "duration": 2596.6687500000007,
      "memoryUsage": 0,
      "success": false,
      "error": "Command failed: npx jest tests/unit/\nPASS tests/unit/services/InterpreterRegistry.test.ts\n  InterpreterRegistry\n    Registration\n      ✓ should register interpreter successfully (2 ms)\n      ✓ should throw error when registering duplicate interpreter (12 ms)\n      ✓ should unregister interpreter successfully\n      ✓ should return false when unregistering non-existent interpreter (1 ms)\n    Interpreter Retrieval\n      ✓ should return interpreter by name\n      ✓ should throw error when getting non-existent interpreter (1 ms)\n      ✓ should check if interpreter exists\n    Data Type Support\n      ✓ should return interpreters that support a data type (1 ms)\n      ✓ should return empty array when no interpreters support data type\n      ✓ should support language-specific data type filtering (2 ms)\n    Registry Operations\n      ✓ should list all registered interpreter names (1 ms)\n      ✓ should clear all interpreters\n      ✓ should get interpreter count (1 ms)\n    Interpreter Metadata\n      ✓ should retrieve interpreter metadata\n      ✓ should throw error when getting metadata for non-existent interpreter\n    Processing Chain\n      ✓ should process data through interpreter\n      ✓ should get compatible interpreters for data processing chain (1 ms)\n    Error Handling\n      ✓ should handle interpreter validation errors gracefully\n      ✓ should handle processing errors in interpreter chain (6 ms)\n    Configuration Management\n      ✓ should configure interpreter through registry (1 ms)\n    Capabilities\n      ✓ should retrieve interpreter capabilities\n\nPASS tests/unit/models/FileAnalysisRequest.test.ts\n  FileAnalysisRequest Model\n    AnalysisOptions interface\n      ✓ should create valid options object\n      ✓ should work with minimal options (1 ms)\n    FileAnalysisRequest interface\n      ✓ should create valid request\n      ✓ should work without options\n    validateFileAnalysisRequest\n      ✓ should validate valid request\n      ✓ should reject request without filePath\n      ✓ should reject empty filePath\n      ✓ should reject invalid format (1 ms)\n      ✓ should reject invalid parseTimeout\n      ✓ should accept request without options\n    normalizeAnalysisOptions\n      ✓ should provide defaults for undefined options (1 ms)\n      ✓ should provide defaults for missing properties\n      ✓ should preserve provided values\n    isTypeScriptFile\n      ✓ should return true for .ts files (3 ms)\n      ✓ should return true for .tsx files\n      ✓ should return false for non-TypeScript files (1 ms)\n      ✓ should handle edge cases\n\nPASS tests/unit/models/ExportInfo.test.ts\n  ExportInfo Model\n    ExportInfo interface\n      ✓ should create valid export info object (1 ms)\n      ✓ should create export using helper function\n      ✓ should support all export types\n      ✓ should handle type-only exports\n      ✓ should detect export types correctly\n      ✓ should validate export info objects\n      ✓ should group exports by type (1 ms)\n      ✓ should generate export statistics\n      ✓ should validate export names for conflicts (1 ms)\n\nPASS tests/unit/models/ImportInfo.test.ts\n  ImportInfo Model\n    ImportSpecifier interface\n      ✓ should create valid import specifier (1 ms)\n      ✓ should create default import specifier\n      ✓ should create namespace import specifier\n      ✓ should create named import specifier (1 ms)\n    ImportInfo interface\n      ✓ should create default import\n      ✓ should create named imports\n      ✓ should create namespace import\n      ✓ should create side-effect import\n      ✓ should create type-only imports\n      ✓ should detect import types correctly (1 ms)\n      ✓ should generate import statistics\n\nPASS tests/unit/services/ExtractorRegistry.test.ts\n  ExtractorRegistry\n    Registration\n      ✓ should register extractor successfully (1 ms)\n      ✓ should handle registering duplicate extractor with warning (4 ms)\n      ✓ should unregister extractor successfully\n      ✓ should return false when unregistering non-existent extractor (1 ms)\n    Extractor Retrieval\n      ✓ should return extractor by name\n      ✓ should throw error when getting non-existent extractor (1 ms)\n      ✓ should check if extractor exists\n    Language Support\n      ✓ should return extractors that support a language\n      ✓ should return empty array when no extractors support language (1 ms)\n    Registry Operations\n      ✓ should list all registered extractor names\n      ✓ should clear all extractors (3 ms)\n      ✓ should get extractor count (1 ms)\n    Extractor Metadata\n      ✓ should retrieve extractor metadata\n      ✓ should return undefined when getting non-existent extractor\n    Error Handling\n      ✓ should handle extractor validation errors gracefully (1 ms)\n    Configuration Management\n      ✓ should configure extractor through registry\n\nFAIL tests/unit/services/CacheManager.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nTest Suites: 1 failed, 5 passed, 6 total\nTests:       74 passed, 74 total\nSnapshots:   0 total\nTime:        1.386 s\nRan all test suites matching /tests\\/unit\\//i.\nError: Jest: Got error running globalTeardown - /Users/junwoobang/project/dependency-linker/tests/helpers/optimization/globalTeardown.ts, reason: [TSError: \u001b[96mtests/helpers/optimization/globalTeardown.ts\u001b[0m:\u001b[93m16\u001b[0m:\u001b[93m21\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2365: \u001b[0mOperator '<=' cannot be applied to types 'number' and 'Timeout'.\n\n\u001b[7m16\u001b[0m     for (let i = 0; i <= highestTimeoutId; i++) {\n\u001b[7m  \u001b[0m \u001b[91m                    ~~~~~~~~~~~~~~~~~~~~~\u001b[0m]\n    at runGlobalHook (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/runGlobalHook.js:124:15)\n    at runJest (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/runJest.js:374:5)\n    at _run10000 (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/cli/index.js:343:7)\n    at runCLI (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/cli/index.js:198:3)\n    at Object.run (/Users/junwoobang/project/dependency-linker/node_modules/jest-cli/build/run.js:130:37)\n",
      "totalTests": 0,
      "passedTests": 0,
      "failedTests": 0,
      "passRate": 0
    },
    {
      "name": "Integration Tests Only",
      "duration": 2831.1605,
      "memoryUsage": 0,
      "success": false,
      "error": "Command failed: npx jest tests/integration/\nPASS tests/integration/ast-caching.test.ts\n  AST Caching Integration\n    Cache Hit Performance\n      ✓ should cache AST results for faster subsequent access (11 ms)\n      ✓ should achieve target cache hit rate over multiple files (4 ms)\n    Cache Invalidation\n      ✓ should invalidate cache when file is modified (2 ms)\n      ✓ should support manual cache invalidation (3 ms)\n      ✓ should invalidate dependent caches when dependencies change (2 ms)\n    Memory Management\n      ✓ should enforce cache size limits (1 ms)\n      ✓ should evict least recently used entries when cache is full (1 ms)\n      ✓ should monitor memory usage and trigger cleanup (1 ms)\n    Cache Persistence\n      ✓ should support cache persistence across sessions (1 ms)\n      ✓ should validate cache integrity on load (1 ms)\n    Cache Configuration\n      ✓ should support configurable cache settings (3 ms)\n      ✓ should support cache warming for frequently used files (1 ms)\n    Cache Analytics\n      ✓ should provide detailed cache statistics\n      ✓ should track cache performance over time (2 ms)\n\nPASS tests/integration/multi-language-analysis.test.ts\n  Multi-Language Analysis Integration\n    TypeScript Analysis\n      ✓ should analyze TypeScript files with imports and exports (5 ms)\n      ✓ should handle TypeScript syntax errors gracefully (2 ms)\n    JavaScript Analysis\n      ✓ should analyze CommonJS modules (3 ms)\n      ✓ should analyze ES6 modules (1 ms)\n    Go Analysis\n      ✓ should analyze Go packages and imports (5 ms)\n    Java Analysis\n      ✓ should analyze Java classes and imports (3 ms)\n    Batch Analysis\n      ✓ should analyze multiple files of different languages (7 ms)\n    Cross-Language Dependency Analysis\n      ✓ should identify dependencies across language boundaries (2 ms)\n\nFAIL tests/integration/optimization/test-suite-analysis.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m131\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18047: \u001b[0m'tempFiles' is possibly 'null'.\n\n    \u001b[7m131\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m131\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'rootDir' does not exist on type '{ cleanup: () => Promise<void>; }'.\n\n    \u001b[7m131\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m143\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<string[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<string[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<string[]>' is not assignable to type 'Promise<void>'.\n          Type 'string[]' is not assignable to type 'void'.\n\n    \u001b[7m143\u001b[0m       const result = await benchmark.benchmark('test-discovery', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m148\u001b[0m:\u001b[93m32\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m148\u001b[0m       const testFiles = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                               ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m151\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m151\u001b[0m       expect(testFiles.some(f => f.includes('typescript-parser.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m152\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m152\u001b[0m       expect(testFiles.some(f => f.includes('typescript-parser-duplicate.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m153\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m153\u001b[0m       expect(testFiles.some(f => f.includes('analysis-engine.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m154\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m154\u001b[0m       expect(testFiles.some(f => f.includes('timing-dependent.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m155\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'f' implicitly has an 'any' type.\n\n    \u001b[7m155\u001b[0m       expect(testFiles.some(f => f.includes('heavy-setup.test.ts'))).toBe(true);\n    \u001b[7m   \u001b[0m \u001b[91m                            ~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m169\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m169\u001b[0m       const analysis = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m188\u001b[0m:\u001b[93m30\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m188\u001b[0m       const metrics = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                             ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m206\u001b[0m:\u001b[93m71\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m206\u001b[0m       const result = await benchmark.benchmark('duplicate-detection', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                      ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m211\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m211\u001b[0m       const duplicates = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m217\u001b[0m:\u001b[93m46\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'group' implicitly has an 'any' type.\n\n    \u001b[7m217\u001b[0m       const duplicateGroup = duplicates.find(group =>\n    \u001b[7m   \u001b[0m \u001b[91m                                             ~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m218\u001b[0m:\u001b[93m26\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m218\u001b[0m         group.tests.some(test => test.includes('typescript-parser'))\n    \u001b[7m   \u001b[0m \u001b[91m                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m227\u001b[0m:\u001b[93m67\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m227\u001b[0m       const result = await benchmark.benchmark('flaky-detection', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                  ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m232\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m232\u001b[0m       const flakyTests = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m237\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m237\u001b[0m       const timingTest = flakyTests.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m247\u001b[0m:\u001b[93m66\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m247\u001b[0m       const result = await benchmark.benchmark('setup-analysis', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                 ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m252\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m252\u001b[0m       const complexSetups = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m258\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'setup' implicitly has an 'any' type.\n\n    \u001b[7m258\u001b[0m       const heavySetup = complexSetups.find(setup =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m275\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m275\u001b[0m       const impact = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m298\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m298\u001b[0m       const patterns = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m320\u001b[0m:\u001b[93m28\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m320\u001b[0m       const risks = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                           ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m338\u001b[0m:\u001b[93m75\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any[]>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<any[]>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<any[]>' is not assignable to type 'Promise<void>'.\n          Type 'any[]' is not assignable to type 'void'.\n\n    \u001b[7m338\u001b[0m       const result = await benchmark.benchmark('critical-identification', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                          ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m343\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m343\u001b[0m       const critical = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m348\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m348\u001b[0m       const integrationTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m362\u001b[0m:\u001b[93m65\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to parameter of type '() => void | Promise<void>'.\n      Type 'Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to type 'void | Promise<void>'.\n        Type 'Promise<{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }>' is not assignable to type 'Promise<void>'.\n          Type '{ testFiles: string[]; suiteMetrics: any; duplicates: any[]; flakyTests: any[]; complexSetups: any[]; impact: any; risks: any; }' is not assignable to type 'void'.\n\n    \u001b[7m362\u001b[0m       const result = await benchmark.benchmark('full-analysis', async () => {\n    \u001b[7m   \u001b[0m \u001b[91m                                                                ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-suite-analysis.test.ts\u001b[0m:\u001b[93m384\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m384\u001b[0m       const analysis = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n\nFAIL tests/integration/optimization/test-categorization.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m256\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18047: \u001b[0m'tempFiles' is possibly 'null'.\n\n    \u001b[7m256\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m256\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'rootDir' does not exist on type '{ cleanup: () => Promise<void>; }'.\n\n    \u001b[7m256\u001b[0m     testDir = tempFiles.rootDir;\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m273\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m273\u001b[0m       const critical = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m279\u001b[0m:\u001b[93m45\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m279\u001b[0m       const apiContractTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                            ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m287\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m287\u001b[0m       const e2eTest = critical.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m304\u001b[0m:\u001b[93m31\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m304\u001b[0m       const optimize = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                              ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m310\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m310\u001b[0m       const parserUnitTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                           ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m317\u001b[0m:\u001b[93m43\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m317\u001b[0m       const redundantTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                          ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m324\u001b[0m:\u001b[93m42\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m324\u001b[0m       const behaviorTest = optimize.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                         ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m337\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m337\u001b[0m       const remove = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m343\u001b[0m:\u001b[93m41\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m343\u001b[0m       const duplicateTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                        ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m350\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m350\u001b[0m       const flakyTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m357\u001b[0m:\u001b[93m40\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m357\u001b[0m       const obsoleteTest = remove.find(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                       ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m418\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m418\u001b[0m       categorization.critical.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m424\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m424\u001b[0m       categorization.optimize.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m428\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m428\u001b[0m       categorization.remove.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m492\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'result' does not exist on type 'BenchmarkResult'.\n\n    \u001b[7m492\u001b[0m       const categorization = result.result;\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m546\u001b[0m:\u001b[93m55\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m546\u001b[0m       const flakyTests = categorization.remove.filter(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m561\u001b[0m:\u001b[93m51\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'rec' implicitly has an 'any' type.\n\n    \u001b[7m561\u001b[0m       const sharedSetupRec = recommendations.find(rec =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                  ~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m568\u001b[0m:\u001b[93m56\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'rec' implicitly has an 'any' type.\n\n    \u001b[7m568\u001b[0m       const duplicateRemovalRec = recommendations.find(rec =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                       ~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m603\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m603\u001b[0m       categorization.critical.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m610\u001b[0m:\u001b[93m36\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m610\u001b[0m       categorization.optimize.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                   ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m617\u001b[0m:\u001b[93m34\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type 'any' is not assignable to parameter of type 'never'.\n\n    \u001b[7m617\u001b[0m       categorization.remove.push(test);\n    \u001b[7m   \u001b[0m \u001b[91m                                 ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m622\u001b[0m:\u001b[93m3\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2322: \u001b[0mType 'any[]' is not assignable to type 'never[]'.\n      Type 'any' is not assignable to type 'never'.\n\n    \u001b[7m622\u001b[0m   categorization.recommendations = generateRecommendations(categorization);\n    \u001b[7m   \u001b[0m \u001b[91m  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m719\u001b[0m:\u001b[93m39\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m719\u001b[0m     baseCategorization.remove.forEach(test => {\n    \u001b[7m   \u001b[0m \u001b[91m                                      ~~~~\u001b[0m\n    \u001b[96mtests/integration/optimization/test-categorization.test.ts\u001b[0m:\u001b[93m733\u001b[0m:\u001b[93m60\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7006: \u001b[0mParameter 'test' implicitly has an 'any' type.\n\n    \u001b[7m733\u001b[0m   const complexSetupTests = categorization.optimize.filter(test =>\n    \u001b[7m   \u001b[0m \u001b[91m                                                           ~~~~\u001b[0m\n\nFAIL tests/integration/api/compatibility.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/integration/api/compatibility.test.ts\u001b[0m:\u001b[93m283\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getMetrics' does not exist on type 'PerformanceMonitor'.\n\n    \u001b[7m283\u001b[0m       expect(typeof monitor.getMetrics).toBe('function');\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~\u001b[0m\n\nFAIL tests/integration/plugin-system.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/performance.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/extensible-analyzer.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/dependency-compatibility.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nFAIL tests/integration/batch-analysis.test.ts\n  ● Test suite failed to run\n\n    EXPERIMENTAL FEATURE!\n    Your test suite is leaking memory. Please ensure all references are cleaned.\n\n    There is a number of things that can leak memory:\n      - Async operations that have not finished (e.g. fs.readFile).\n      - Timers not properly mocked (e.g. setInterval, setTimeout).\n      - Keeping references to the global scope.\n\n      at onResult (node_modules/@jest/core/build/TestScheduler.js:150:18)\n      at node_modules/@jest/core/build/TestScheduler.js:254:19\n      at node_modules/emittery/index.js:363:13\n          at Array.map (<anonymous>)\n      at Emittery.emit (node_modules/emittery/index.js:361:23)\n\nTest Suites: 8 failed, 2 passed, 10 total\nTests:       22 passed, 22 total\nSnapshots:   0 total\nTime:        1.933 s\nRan all test suites matching /tests\\/integration\\//i.\nError: Jest: Got error running globalTeardown - /Users/junwoobang/project/dependency-linker/tests/helpers/optimization/globalTeardown.ts, reason: [TSError: \u001b[96mtests/helpers/optimization/globalTeardown.ts\u001b[0m:\u001b[93m16\u001b[0m:\u001b[93m21\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2365: \u001b[0mOperator '<=' cannot be applied to types 'number' and 'Timeout'.\n\n\u001b[7m16\u001b[0m     for (let i = 0; i <= highestTimeoutId; i++) {\n\u001b[7m  \u001b[0m \u001b[91m                    ~~~~~~~~~~~~~~~~~~~~~\u001b[0m]\n    at runGlobalHook (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/runGlobalHook.js:124:15)\n    at runJest (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/runJest.js:374:5)\n    at _run10000 (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/cli/index.js:343:7)\n    at runCLI (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/cli/index.js:198:3)\n    at Object.run (/Users/junwoobang/project/dependency-linker/node_modules/jest-cli/build/run.js:130:37)\n",
      "totalTests": 0,
      "passedTests": 0,
      "failedTests": 0,
      "passRate": 0
    },
    {
      "name": "Contract Tests Only",
      "duration": 1985.8878750000003,
      "memoryUsage": 0,
      "success": false,
      "error": "Command failed: npx jest tests/contract/\nPASS tests/contract/data-interpreter.contract.test.ts\n  IDataInterpreter Contract\n    Core Interpretation\n      ✓ interpret should process input data with context (2 ms)\n      ✓ interpret should return consistent output structure (1 ms)\n      ✓ interpret should handle empty input data (1 ms)\n      ✓ interpret should utilize context information\n    Data Type Support\n      ✓ supports should return boolean for data type check (1 ms)\n      ✓ supports should handle various data types (1 ms)\n      ✓ should have specific data type specialization\n    Plugin Metadata\n      ✓ getName should return string identifier (1 ms)\n      ✓ getVersion should return valid version string\n      ✓ getName should be consistent (1 ms)\n    Output Schema\n      ✓ getOutputSchema should return valid schema\n      ✓ output should conform to declared schema (1 ms)\n    Input Validation\n      ✓ validate should return ValidationResult\n      ✓ validate should accept valid interpreter input (2 ms)\n      ✓ validate should detect invalid input (1 ms)\n      ✓ validate should provide actionable error messages\n    Context Handling\n      ✓ should handle minimal context (1 ms)\n      ✓ should handle rich context with options\n      ✓ should adapt behavior based on language context\n    Performance Requirements\n      ✓ interpret should complete quickly for small datasets\n      ✓ supports should execute instantly\n      ✓ validate should be efficient (1 ms)\n    Error Handling\n      ✓ interpret should handle null input gracefully\n      ✓ interpret should handle missing context fields\n      ✓ should handle malformed input data gracefully (1 ms)\n    Plugin System Integration\n      ✓ should provide discoverable plugin information\n      ✓ should work in plugin registry system\n\nPASS tests/contract/data-extractor.contract.test.ts\n  IDataExtractor Contract\n    Core Extraction\n      ✓ extract should accept AST and file path (1 ms)\n      ✓ extract should return consistent data structure\n      ✓ extract should handle empty AST (1 ms)\n      ✓ extract should handle complex AST structures\n    Language Support\n      ✓ supports should return boolean (1 ms)\n      ✓ supports should handle multiple languages\n      ✓ should have specific language support pattern (1 ms)\n    Metadata\n      ✓ getName should return string identifier\n      ✓ getVersion should return valid version string (1 ms)\n      ✓ getName should return consistent value\n    Data Validation\n      ✓ validate should return ValidationResult (2 ms)\n      ✓ validate should accept extracted data format (1 ms)\n      ✓ validate should detect invalid data\n      ✓ validate should provide meaningful error messages\n    Performance Requirements\n      ✓ extract should complete quickly for small ASTs (1 ms)\n      ✓ supports should execute instantly\n      ✓ validate should be efficient\n    Error Handling\n      ✓ extract should handle malformed AST gracefully (1 ms)\n      ✓ extract should handle missing file path\n      ✓ validate should handle null/undefined data\n    Type Safety\n      ✓ extract should return consistent type (1 ms)\n      ✓ validate should accept return type of extract\n    Plugin Compatibility\n      ✓ should work with plugin registry system\n      ✓ should provide plugin metadata (1 ms)\n\nPASS tests/contract/language-parser.contract.test.ts\n  ILanguageParser Contract\n    Language Support\n      ✓ supports should return boolean for language check (1 ms)\n      ✓ supports should handle common language identifiers\n      ✓ detectLanguage should return language string from file path\n      ✓ detectLanguage should handle content-based detection\n    Parsing Functionality\n      ✓ parse should return valid ParseResult (1 ms)\n      ✓ parse should accept file path and optional content\n      ✓ parse should handle invalid syntax gracefully (1 ms)\n      ✓ parse should provide performance metrics\n    Syntax Validation\n      ✓ validateSyntax should return validation result\n      ✓ validateSyntax should detect valid syntax (1 ms)\n      ✓ validateSyntax should detect invalid syntax (1 ms)\n    Grammar Access\n      ✓ getGrammar should return grammar object\n    Performance Requirements\n      ✓ parse should complete within target time for small files (1 ms)\n      ✓ parse should report accurate timing\n      ✓ supports should execute quickly\n    Error Handling\n      ✓ parse should handle file not found (1 ms)\n      ✓ parse should handle unsupported files\n    Caching Behavior\n      ✓ parse should indicate cache hits when appropriate\n\nPASS tests/contract/analysis-engine.contract.test.ts\n  IAnalysisEngine Contract\n    File Analysis\n      ✓ analyzeFile should accept valid file path and return analysis result (1 ms)\n      ✓ analyzeFile should accept optional configuration\n      ✓ analyzeFile should handle non-existent files gracefully\n    Batch Analysis\n      ✓ analyzeBatch should process multiple files (1 ms)\n      ✓ analyzeBatch should handle empty array\n    Plugin Registration\n      ✓ registerExtractor should accept valid extractor (1 ms)\n      ✓ registerInterpreter should accept valid interpreter\n    Cache Management\n      ✓ clearCache should be callable\n      ✓ getCacheStats should return valid statistics (1 ms)\n    Performance Requirements\n      ✓ analyzeFile should complete within reasonable time\n      ✓ performance metrics should be included in results\n\nFAIL tests/contract/test-optimizer.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-optimizer.contract.test.ts\u001b[0m:\u001b[93m13\u001b[0m:\u001b[93m3\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"../../specs/005-test-optimization/contracts/test-optimization.contract\"' has no exported member 'RollbackResult'.\n\n    \u001b[7m13\u001b[0m   RollbackResult,\n    \u001b[7m  \u001b[0m \u001b[91m  ~~~~~~~~~~~~~~\u001b[0m\n\nFAIL tests/contract/test-setup-manager.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-setup-manager.contract.test.ts\u001b[0m:\u001b[93m372\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m372\u001b[0m         expect(error.message).toContain('getResourceState');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n\nFAIL tests/contract/test-data-factory.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-data-factory.contract.test.ts\u001b[0m:\u001b[93m453\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m453\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-data-factory.contract.test.ts\u001b[0m:\u001b[93m454\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m454\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n\nFAIL tests/contract/test-benchmark.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-benchmark.contract.test.ts\u001b[0m:\u001b[93m519\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m519\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-benchmark.contract.test.ts\u001b[0m:\u001b[93m520\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m520\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n\nFAIL tests/contract/test-assertions.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m480\u001b[0m:\u001b[93m53\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m480\u001b[0m         console.warn('Contract validation failed:', error.message);\n    \u001b[7m   \u001b[0m \u001b[91m                                                    ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m481\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m481\u001b[0m         expect(typeof error.message).toBe('string');\n    \u001b[7m   \u001b[0m \u001b[91m                      ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m509\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m509\u001b[0m         expect(error.message).toContain('3/3 failures');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m510\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m510\u001b[0m         expect(error.message).toContain('Sample errors');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n    \u001b[96mtests/contract/test-assertions.contract.test.ts\u001b[0m:\u001b[93m511\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS18046: \u001b[0m'error' is of type 'unknown'.\n\n    \u001b[7m511\u001b[0m         expect(error.message).toContain('Test failure');\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~\u001b[0m\n\nFAIL tests/contract/test-analyzer.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m59\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'RollbackResult'.\n\n    \u001b[7m59\u001b[0m   rollbackOptimization(result: OptimizationResult): Promise<RollbackResult>;\n    \u001b[7m  \u001b[0m \u001b[91m                                                            ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m95\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m95\u001b[0m   testSuites: TestSuite[];\n    \u001b[7m  \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m96\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestIssue'.\n\n    \u001b[7m96\u001b[0m   issues: TestIssue[];\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m100\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m100\u001b[0m   critical: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m101\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m101\u001b[0m   optimize: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m102\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m102\u001b[0m   remove: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m103\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'DuplicateTest'.\n\n    \u001b[7m103\u001b[0m   duplicates: DuplicateTest[];\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m129\u001b[0m:\u001b[93m17\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m129\u001b[0m   removedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m130\u001b[0m:\u001b[93m18\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m130\u001b[0m   modifiedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                 ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m141\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'ValidationIssue'.\n\n    \u001b[7m141\u001b[0m   issuesFound: ValidationIssue[];\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~~~~~~~~~~~\u001b[0m\n\nFAIL tests/contract/performance-tracker.contract.test.ts\n  ● Test suite failed to run\n\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m59\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'RollbackResult'.\n\n    \u001b[7m59\u001b[0m   rollbackOptimization(result: OptimizationResult): Promise<RollbackResult>;\n    \u001b[7m  \u001b[0m \u001b[91m                                                            ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m95\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m95\u001b[0m   testSuites: TestSuite[];\n    \u001b[7m  \u001b[0m \u001b[91m              ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m96\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestIssue'.\n\n    \u001b[7m96\u001b[0m   issues: TestIssue[];\n    \u001b[7m  \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m100\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m100\u001b[0m   critical: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m101\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m101\u001b[0m   optimize: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m102\u001b[0m:\u001b[93m11\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestSuite'.\n\n    \u001b[7m102\u001b[0m   remove: TestSuite[];\n    \u001b[7m   \u001b[0m \u001b[91m          ~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m103\u001b[0m:\u001b[93m15\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'DuplicateTest'.\n\n    \u001b[7m103\u001b[0m   duplicates: DuplicateTest[];\n    \u001b[7m   \u001b[0m \u001b[91m              ~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m129\u001b[0m:\u001b[93m17\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m129\u001b[0m   removedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m130\u001b[0m:\u001b[93m18\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'TestCase'.\n\n    \u001b[7m130\u001b[0m   modifiedTests: TestCase[];\n    \u001b[7m   \u001b[0m \u001b[91m                 ~~~~~~~~\u001b[0m\n    \u001b[96mspecs/005-test-optimization/contracts/test-optimization.contract.ts\u001b[0m:\u001b[93m141\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2304: \u001b[0mCannot find name 'ValidationIssue'.\n\n    \u001b[7m141\u001b[0m   issuesFound: ValidationIssue[];\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~~~~~~~~~~~\u001b[0m\n\nTest Suites: 7 failed, 4 passed, 11 total\nTests:       80 passed, 80 total\nSnapshots:   0 total\nTime:        1.042 s\nRan all test suites matching /tests\\/contract\\//i.\nError: Jest: Got error running globalTeardown - /Users/junwoobang/project/dependency-linker/tests/helpers/optimization/globalTeardown.ts, reason: [TSError: \u001b[96mtests/helpers/optimization/globalTeardown.ts\u001b[0m:\u001b[93m16\u001b[0m:\u001b[93m21\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2365: \u001b[0mOperator '<=' cannot be applied to types 'number' and 'Timeout'.\n\n\u001b[7m16\u001b[0m     for (let i = 0; i <= highestTimeoutId; i++) {\n\u001b[7m  \u001b[0m \u001b[91m                    ~~~~~~~~~~~~~~~~~~~~~\u001b[0m]\n    at runGlobalHook (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/runGlobalHook.js:124:15)\n    at runJest (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/runJest.js:374:5)\n    at _run10000 (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/cli/index.js:343:7)\n    at runCLI (/Users/junwoobang/project/dependency-linker/node_modules/@jest/core/build/cli/index.js:198:3)\n    at Object.run (/Users/junwoobang/project/dependency-linker/node_modules/jest-cli/build/run.js:130:37)\n",
      "totalTests": 0,
      "passedTests": 0,
      "failedTests": 0,
      "passRate": 0
    }
  ]
}